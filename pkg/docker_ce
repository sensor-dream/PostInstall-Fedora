#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @File   : docker_ce
## @Author : sensor-dream (SDBS)
## @Email  : sensor-dream@sensor-dream.ru
## @Site   : https://sensor-dream.ru
## @Date   : 06.05.2019, 8:02:40

#
#   Декларируем имя файла
#

declare -rx pkg_docker_ce_script_source="$BASH_SOURCE";

if [[ -z "$main_run_script_path" ]]; then
  declare -rx main_run_script_path="$(pwd)";
  echo "Скрипт запускается из ${main_run_script_path}";
fi

#
#   Подключаем общую библиотеку и общую конфигурацию
#

if [[ -z "$main_cfg_script_source" ]]; then
  check=1;
  while [[ "$check" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../;
      else
        cd "${main_run_script_path}";
        check=0;
        echo '\e[47;31m'"!!! Не найден общий файл конфигурации !!!\033[0m";
        tput sgr0;
        exit 1;
      fi
    else
      check=0;
      if [[ -z "$main_cfg_script_source" ]]; then
        declare -rx main_project_path="$(pwd)";
        . "$main_project_path/main.cfg";
      fi
      cd "${main_run_script_path}";
    fi
  done
fi

echo_w "Подключаем $(readlink -m $pkg_docker_ce_script_source)";


function main_pkg_docker_ce_script_source(){

  check_root;

  echo_m "Initialise main function";

  install_pkg=(\
#   Docker`изация
#
# Docker
'docker docker-client docker-common docker-compose docker-anaconda-addon docker-devel docker-distribution docker-fish-completion docker-logrotate docker-lvm-plugin docker-novolume-plugin docker-vim docker-zsh-completion docker-selinux docker-rhel-push-plugin oci-register-machine' \
#
'containerd container-selinux' \
#
#
'docker-engine-selinux docker-engine' \
#
'docker-client-java' \
# latest
'docker-latest docker-latest-devel docker-latest-fish-completion docker-latest-logrotate docker-latest-rhsubscription docker-latest-unit-test docker-client-latest docker-latest-v1.10-migrator docker-latest-vim docker-latest-zsh-completion' \
#
'docker-latest-unit-tests' \
#
#  Для Создания docker image на основе deb
'debootstrap' \
);

  echo_w "Удаляем стандартную установку, если есть.";

  remove_packages -na "${install_pkg[*]}";

  install_pkg=(\
'docker-ce' \
'docker-ce-cli' \
'containerd.io' \
);

  # Docker Community Edition (CE) is ideal for developers and small teams looking to get started with Docker and experimenting with container-based apps. Docker CE has three types of update channels, stable, test, and nightly

  echo_w "Ставим Docker CE";

  . "$main_project_path/pkg/repo/docker_ce";

  # install_packages  -n -v 29 "${install_pkg[*]}";

  install_packages "${install_pkg[*]}";

  local chk_groups="$(getent group docker)";

  if ! grep -q  docker <<< "$chk_groups"; then
    echo_w "Группа docker не существует, создаем.";
    groupadd docker;
  else
    if ! grep -q  docker <<< "$chk_groups"; then
      echo_m "Добавляем $main_user в группу docker";
      usermod -a -G docker "$main_user";
    else
      echo_m "Пользователь $main_user уже в группе docker";
    fi
  fi

  systemctl daemon-reload;

  systemctl enable docker;

  systemctl start docker;

}

main_pkg_docker_ce_script_source "$@";