#!/bin/env bash
# -*- coding: utf-8 -*-
## @File   : vhttpd.bash
## @Author : sensor-dream (sensor-dream@sensor-dream.ru)
## @Link   : https://sensor-dream.ru
## @Date   : 2018-12-8 09:38:33

#
#   Декларируем имя файла
#

declare -rx www_vhttpd_script_source="$BASH_SOURCE";

if [[ -z "$main_run_script_path" ]]; then
  declare -rx main_run_script_path="$(pwd)";
  echo "Скрипт запускается из ${main_run_script_path}";
fi

#
#   Подключаем общую библиотеку и общую конфигурацию
#

if [[ -z "$main_cfg_script_source" ]]; then
  check=1;
  while [[ "$check" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../;
      else
        cd "${main_run_script_path}";
        check=0;
        echo '\e[47;31m'"!!! Не найден общий файл конфигурации !!!\033[0m";
        tput sgr0;
        exit 1;
      fi
    else
      check=0;
      if [[ -z "$main_cfg_script_source" ]]; then
        declare -rx main_project_path="$(pwd)";
        . "$main_project_path/main.cfg";
      fi
      cd "${main_run_script_path}";
    fi
  done
fi

echo_w "Подключаем $(readlink -m $www_vhttpd_script_source)";

check_root;


if [[ -z "$www_initial_certbot_script_source"  ]]; then
  . "${main_project_path}/www/initial_certbot";
fi

function create_virtual_host() {


  local SERVER_SIGNATURE="$main_server_signature";
  local SERVER_SIGNATURE_VERSION="$main_server_signature_version";
  local SERVER_OS_VERSION="$main_server_os_version";
  local base_path="$main_www_base_path";
  local domain_list="";
  local domain="$main_domain";
  local root_domain='';
  local domain_aliases="";
  local domain_base_path="";
  local domain_root_path="";

  local len=0;
  local OLDIFS="$IFS";
  local result='';
  local OPT='';
  local key_remove=0;
  local erase_log_domain=0;

  local internet_connection="$(ping ya.ru -c 1 -W 1 | grep loss | awk -F, '{ print $3 }' | awk '{ print $1 }')";

  if [[ "$internet_connection" == "100%" ]];then
    echo_w "No Internet connection. $internet_connection packet loss.";
  else
    echo_m "Internet connection is ok. $internet_connection packet loss.";
  fi

  OPTIND=1

  while getopts "ue" OPT
  do
    case $OPT in
      u ) key_remove=1; ;;
      e ) erase_log_domain=1; ;;
      * ) ;;
    esac
  done

  shift $(($OPTIND - 1));
  # shift `expr $OPTIND - 1`;
  [ "${1:-}" = "--" ] && shift;

  if [[ -z "$domain" ]]; then
    domain="$main_user.ru";
  fi

  [[ -z "$base_path" ]] && base_path="/var/www/html";

  if [[ ! -d  "$base_path" ]]; then
    mkdir -p -m 775 "$base_path";
    chown -R apache."$main_user" "$base_path";
  fi


  if [[ -n "$@" ]]; then
    domain_list=($@);
  else
    domain_list=(${main_www_domain_list[*]});
  fi

  [[ ${#domain_list[*]} -eq 0 ]] && domain_list=("$main_domain");

  # install_packages "mod_ssl mod_md mod_http2 mod_security certbot";

  for i in ${!domain_list[*]}; do

    domain=${domain_list[$i]};

    if [[ -f "/etc/httpd/conf.d/$domain.conf" ]]; then
      rm -f "/etc/httpd/conf.d/$domain.conf";
    fi

    if [[ -f "/etc/logrotate.d/$domain" ]]; then
      rm -f "/etc/logrotate.d/$domain";
    fi

    if [[ -f "/etc/php-fpm.d/www.$domain.conf" ]]; then
      rm -f "/etc/php-fpm.d/www.$domain.conf";
    fi

  done

  if [[ -f "/etc/httpd/conf.d/MAIN_CONFIG_SERVER.conf" ]]; then
    rm -f "/etc/httpd/conf.d/MAIN_CONFIG_SERVER.conf";
  fi

  echo_m "Delete all configurations files for domains ${domain_list[*]}";

  result=$(httpd -t 2>&1);

  if grep -q "OK" <<< $result; then
    if [[ $(chk_active_service httpd) -eq 1 ]]; then
      echo_m "Apply the pre configure configuration."
      $(httpd -k graceful);
    else
      echo_w "Restart HTTPD server."
      systemctl_start_services httpd;
    fi
    echo_m "Pre configuration domains completed."
  else
    echo_w $result;
    echo_w "Выход :(";
    exit 1;
  fi

  if [[ $key_remove -eq 1 ]];then
    exit 0;
  fi

  if [[ ! -f "/etc/httpd/conf.d/MAIN_CONFIG_SERVER.conf" ]]; then

cat << LOLS > '/etc/httpd/conf.d/MAIN_CONFIG_SERVER.conf';

##
##  GLOBALs server configuration
##
## Must be installed: mod_ssl mod_md mod_http2 mod_security
##

#ProductOnly	Server: Apache
#Major	Server: Apache/2
#Minor	Server: Apache/2.0
#Minimal	Server: Apache/2.0.55
#OS	Server: Apache/2.0.55 (Debian)
#Full (or not specified) default	Server: Apache/2.0.55 (Debian) PHP/5.1.2-1+b1 mod_ssl/2.0.55 OpenSSL/0.9.8b
#ServerTokens ProductOnly
#ServerTokens Full
#ServerTokens Minimal
ServerTokens OS

# On | Off | EMail
ServerSignature Off

<IfModule mod_security2.c>
#  SecServerSignature "$SERVER_SIGNATURE"
#  SecServerSignature "$SERVER_SIGNATURE/$SERVER_SIGNATURE_VERSION"
  SecServerSignature "$SERVER_SIGNATURE/$SERVER_SIGNATURE_VERSION ($SERVER_OS_VERSION)"
</IfModule>

<IfModule mod_md.c>
  ## MDomain $domain
  ## off|temporary|permanent
  MDRequireHttps temporary
  MDCertificateAgreement https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf
</IfModule>
LOLS

    echo_m "File /etc/httpd/conf.d/global_server_doamin.conf created."

  fi

  if [[ ! -f '/etc/letsencrypt/isrgrootx1.pem' ]]; then

    wget -q 'https://letsencrypt.org/certs/isrgrootx1.pem.txt' -O '/etc/letsencrypt/isrgrootx.pem';

    if [[ -f '/etc/letsencrypt/isrgrootx.pem' ]]; then
      mv -f '/etc/letsencrypt/isrgrootx.pem' '/etc/letsencrypt/isrgrootx1.pem';
      httpd -k graceful;
    fi;

    add_cron_job '@daily' "sh <<<'wget -q https://letsencrypt.org/certs/isrgrootx1.pem.txt -O /etc/letsencrypt/isrgrootx.pem; if [[ -f /etc/letsencrypt/isrgrootx.pem ]]; then mv -f /etc/letsencrypt/isrgrootx.pem /etc/letsencrypt/isrgrootx1.pem; httpd -k graceful; fi 2>&1' > /dev/null &" 'root';
  fi


  if ! grep -q "SSLStaplingCache" "/etc/httpd/conf/httpd.conf"; then
cat<<EOF >> "/etc/httpd/conf/httpd.conf"

# Устанавливаем местоположение SSL Stapling Cache и его время жизни
SSLStaplingCache shmcb:/tmp/stapling_cache(128000)

EOF
  fi



  for i in ${!domain_list[*]}; do

    domain=${domain_list[$i]};

    domain_base_path=(${domain//./ });
    len=${#domain_base_path[*]};

    if [[ $len -gt 1 ]]; then

      domain_root_path="$base_path/${domain_base_path[$len-1]}/${domain_base_path[$len-2]}";

      root_domain="${domain_base_path[$len-2]}.${domain_base_path[$len-1]}";

      if [[ ! -f "/etc/letsencrypt/live/$root_domain/fullchain.pem" ]]; then
        generate_wildcard_certificate "$root_domain";
      fi

      if [[ $len -eq 2 ]];then
        domain_aliases="www.$domain";
        domain_root_path="$domain_root_path/root";
        domain_base_path="root";
      else
        domain_aliases="$domain";
        unset domain_base_path[$len-1];
        unset domain_base_path[$len-2];
        IFS=".";
        domain_base_path="${domain_base_path[*]}";
        IFS="$OLDIFS";
        domain_root_path="$domain_root_path/$domain_base_path";
      fi

      if [[ ! -d  "$domain_root_path" ]]; then
        mkdir -p -m 775 "$domain_root_path";
        # mkdir -p -m 775 "$domain_root_path/www";
        cp -r "$main_project_path/www/www_def" "$domain_root_path/www";
        mkdir -p -m 775 "$domain_root_path/logs";
        mkdir -p -m 775 "$domain_root_path/cgi-bin";
        mkdir -p -m 775 "$domain_root_path/tmp";
        set_permission -r -u apache -g "$main_user" "$domain_root_path";
        set_permission "$domain_root_path/logs";
      fi

      if [[ $erase_log_domain -eq 1 ]];then
        truncate -c -s 0 $domain_root_path/logs/*.*;
        rm -f $domain_root_path/logs/*.log.*;
      fi



      echo "Домен $len уровня";
      echo "Основной домен $root_domain";
      echo "Название хранилища: $domain_base_path";
      echo "Корневая директория: $domain_root_path";
      echo "WWW директория: $domain_root_path/www";
      echo "TEMP директория: $domain_root_path/tmp";
      echo "LOGS директория: $domain_root_path/logs";
      echo "CGI директория: $domain_root_path/cgi-bin";

      cat << LOG > "/etc/logrotate.d/$domain";
#
# Generate file: /etc/logrotate.d/$domain of logrotates
# Date generate: $(date);
#
$domain_root_path/logs/*log {
    missingok
    notifempty
    sharedscripts
#    compress
#    delaycompress
    nocompress
    daily
    copytruncate
    minsize 1M
    rotate 10
    dateext
    postrotate
        /sbin/httpd -k graceful > /dev/null 2>/dev/null || true
    endscript
}
LOG


      cat<<EOF > "/etc/httpd/conf.d/$domain.conf";
#
# Generate file: $domain.conf of $vhttpd_script_source
# Date generate: $(date);

<VirtualHost *:80 [::]:80>

  ServerSignature Off

  # Default TimeOut 60
  TimeOut 320

  <IfModule mod_http2.c>
    Protocols h2 h2c http/1.1
  </IfModule>

  SuexecUserGroup apache apache
  DocumentRoot $domain_root_path/www
  ServerName $domain
  ServerAlias $domain_aliases
  UseCanonicalName Off

  DirectoryIndex index.php

  # Add vhost name to log entries:
  LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"" vhost_combined
  LogFormat "%v %h %l %u %t \"%r\" %>s %b" vhost_common

  CustomLog $domain_root_path/logs/custom.log vhost_combined
  ErrorLog $domain_root_path/logs/error.log
  TransferLog $domain_root_path/logs/access.log

  <Directory $domain_root_path/www>
    Options Indexes Includes FollowSymLinks
    AllowOverride All
    Require all granted
  </Directory>

  RemoteIPHeader X-Forwarded-For
  RemoteIPTrustedProxy 127.0.0.1 ${ip_device}

  ## <If "req('Host') != '$domain' || %{HTTPS} == 'off'">
  <If "%{HTTPS} == 'off'">
    Redirect permanent / https://$domain/
    ## Redirect / https://$domain/
  </If>

  Header set Server-Host "$HOSTNAME"

</VirtualHost>

<VirtualHost *:443 [::]:443>

  ServerSignature Off

  # Default TimeOut 60
  TimeOut 320

  <IfModule mod_http2.c>
    Protocols h2 h2c http/1.1
  </IfModule>

  SuexecUserGroup apache apache
  DocumentRoot $domain_root_path/www
  ServerName $domain
  ServerAlias $domain_aliases
  UseCanonicalName Off

  DirectoryIndex index.php

  FileETag MTime Size

  # Add vhost name to log entries:
  LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"" vhost_combined
  LogFormat "%v %h %l %u %t \"%r\" %>s %b" vhost_common

  CustomLog $domain_root_path/logs/ssl_custom.log vhost_combined
  ErrorLog $domain_root_path/logs/ssl_error.log
  TransferLog $domain_root_path/logs/ssl_access.log

  SSLEngine on

  SSLProtocol all -SSLv3 -SSLv2

  SSLHonorCipherOrder on

  # SSLCipherSuite PROFILE=SYSTEM
  SSLCipherSuite ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS

  SSLCompression off

  SSLStrictSNIVHostCheck off

  SSLProxyProtocol all -SSLv3 -SSLv2
  SSLProxyCipherSuite PROFILE=SYSTEM

  SSLOptions +StrictRequire

  SSLCertificateFile /etc/letsencrypt/live/$root_domain/fullchain.pem
  SSLCertificateChainFile /etc/letsencrypt/live/$root_domain/chain.pem
  SSLCertificateKeyFile /etc/letsencrypt/live/$root_domain/privkey.pem

  # following directive when using client certificate authentication
  SSLCACertificateFile /etc/letsencrypt/isrgrootx1.pem

  SSLUseStapling on

  <Files ~ "\.(cgi|shtml|phtml|php3|php?)$">
    SSLOptions +StdEnvVars
  </Files>

  <Directory $domain_root_path/www>
    Options Indexes Includes FollowSymLinks
    AllowOverride All
    Require all granted
  </Directory>

  <Directory "$domain_root_path/cgi-bin">
    SSLOptions +StdEnvVars
  </Directory>

  <IfModule mod_lua.c>
    <Files "*.lua">
	    SetHandler lua-script
    </Files>
  </IfModule>

  RemoteIPHeader X-Forwarded-For
  RemoteIPTrustedProxy 127.0.0.1 ${ip_device}

  BrowserMatch "MSIE [2-5]" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0 gzip-only-text/html


  <ifmodule mod_header.c>

    RequestHeader edit Destination '^https: http: early:'

    Header always set Server-Host "$HOSTNAME"

    Header always set Cache-Control "no-store, no-cache, must-revalidate, max-age=0, s-maxage=10, no-transform, proxy-revalidate"

    Header always set Access-Control-Allow-Methods "POST, GET, HEAD, OPTIONS"

  </ifmodule>

</VirtualHost>
EOF

      create_name_in_hosts_file $domain;
      echo_m "Configuration domain: $domain completed."

      result=$(httpd -t 2>&1);

      echo_w "$result";

      if grep -q "OK" <<< $result; then
        if [[ $(chk_active_service httpd) -eq 1 ]]; then
          echo_m "Apply the new configuration."
          $(httpd -k graceful);
        else
          echo_w "Restart HTTPD server."
          systemctl_start_services httpd;
        fi
        echo_m "Configuration domains completed."

        chk_status_OCSP_Stapling;

      else
        echo_w $result;
        echo_w "Выход :(";
        exit 1;
      fi

      sleep 1;

    else

      echo_w "Domain \`$domain\` of the first level, not applicable.";

    fi

  done

}

create_virtual_host $@;
