#!/bin/env bash

# -*- coding: utf-8 -*-
#
## @File   : main.cfg
## @Author : sensor-dream (sensor-dream@sensor-dream.ru)
## @Link   : https://sensor-dream.ru
## @Date   : 2018-11-27 03:57:47

#
# #  Декларируем
#

declare temp_one='';
declare temp_one_path="temp_one_path$$";
declare temp_one_file="temp_one_file.$$";
declare -rx OLD_IFS=$IFS;

declare -rx main_cfg_script_source="$BASH_SOURCE";

echo "Connect ${main_cfg_script_source}";

if [[ -z "${main_project_path}" ]]; then
    declare -rx main_project_path="$(pwd)";
fi

if [[ -z "${main_repo_path}" ]]; then
    declare -rx main_repo_path="$(dirname ${main_project_path})";
fi

if [[ -z "${main_root_repo_path}" ]]; then
    declare -rx main_root_repo_path="$(dirname ${main_repo_path})";
fi

if [[ -z "${main_run_script_path}" ]]; then
    declare -rx main_run_script_path="$(pwd)";
    echo "The script runs from ${main_run_script_path}";
fi

[[ -z "$main_lib_functions_script_source" ]] && . "${main_project_path}/lib/data_messages";

echo "Connect ${main_data_messages_script_source}";

echo "path  for cent os releasever";

declare -rx main_releasever_centos_for_dnf="7";

#
## personal information
#

declare main_user='';
declare main_email='';
declare main_password='';
declare main_org='';
declare main_full_org='';
declare main_domain='';
declare main_local_group_domain='';
declare main_hostname='';
declare main_local_zone='';

[[ ! -d "${main_project_path}/security_file" ]] && mkdir -p "${main_project_path}/security_file";

temp_one="${main_project_path}/security_file/personal_information";

if [[ ! -f "${temp_one}" ]]; then
  echo;
  echo -n "Введите имя вашего пользователя в системе: ";
  read main_user;
  echo;
  stty -echo; # скрыть отображение символов ввода
  echo -n "Введите ваш пароль пользователя: ";
  read main_password;
  stty echo; # включить отображение символов ввода
  echo -e "\n";
  echo -n "Введите название вашего остовного домена ( def. ${main_user}.ru ): ";
  read main_domain;
  [[ -z "${main_domain}" ]] && main_domain="${main_user}.ru";
  echo;
  echo -n "Введите ваш персональный email ( def.set email ${main_user}@${main_domain} ): ";
  read main_email;
  [[ -z "${main_email}" ]] && main_email="${main_user}@${main_domain}";
  echo;
  echo -n "Введите аббревиатуру вашей организации ( def. set name SDBS ): ";
  read main_org;
  [[ -z "${main_org}" ]] && main_org="SDBS";
  echo;
  echo -n "Введите полное название вашей организации ( def. set full name Sensor-Dream Boxed System ): ";
  read main_full_org;
  [[ -z "${main_full_org}" ]] && main_full_org="Sensor-Dream Boxed System";
  echo;
  echo -n "Введите название вашего домена в локальной группе: ( def. home and set full name local group home.${main_domain} )";
  read main_local_group_domain;
  if [[ -z "${main_local_group_domain}" ]]; then
    main_local_group_domain="home.${main_domain}";
  else
    main_local_group_domain="main_local_group_domain.${main_domain}";
  fi
  echo;
  echo -n "Введите имя вашего хоста ( def. 4 and set full name 4.home.${main_domain} ): ";
  read main_hostname;
  if [[ -z "${main_hostname}" ]]; then
    main_hostname="4.${main_local_group_domain}";
  else
    main_hostname="${main_hostname}.${main_local_group_domain}";
  fi
  echo;
  echo -n "Введите времменную зону ( def. sety local time zone 'Asia/Novosibirsk' ): ";
  read main_local_zone;
  [[ -z "${main_local_zone}" ]] && main_local_zone="Asia/Novosibirsk";
  echo;
  cat<<EOF > "${temp_one}";
declare -rx main_user="${main_user}";
declare -rx main_email="${main_email}";
declare -rx main_password="${main_password}";
declare -rx main_org="${main_org}";
declare -rx main_full_org="${main_full_org}";
declare -rx main_domain="${main_domain}";
declare -rx main_local_group_domain="${main_local_group_domain}";
declare -rx main_hostname="${main_hostname}";
declare -rx main_local_zone="${main_local_zone}";
EOF
  chown ${main_user}.${main_user} "${main_project_path}/security_file";
  chown ${main_user}.${main_user} "${temp_one}";
  chmod 700 "${temp_one}";
fi

. "${temp_one}";

#declare -rx main_hostname="$(cat /etc/hostname)";

#
#   information_for_sending_mail
#

declare smtp_login='';
declare smtp_password='';
declare smtp_server='';
declare smtp_port='';
declare smtp_protocol='';

temp_one="${main_project_path}/security_file/information_for_sending_mail";

if [[ ! -f "${temp_one}" ]]; then
  echo;
  echo -n "${main_msg_data[8]}: ";
  read smtp_login;
  echo;
  stty -echo;
  echo -n "${main_msg_data[9]} ${smtp_login}: ";
  read smtp_password;
  stty echo;
  echo -e "\n";
  echo -n "${main_msg_data[10]}: ";
  read smtp_server;
  echo;
  echo -n "${main_msg_data[11]}: ";
  read smtp_port;
  echo;
  echo -n "${main_msg_data[12]}: ";
  read smtp_protocol;
  echo;
  cat<< EOF > "${temp_one}";
declare -rx smtp_login="${smtp_login}";
declare -rx smtp_password="${smtp_password}";
declare -rx smtp_server="${smtp_server}";
declare -rx smtp_port=${smtp_port};
declare -rx smtp_protocol="${smtp_protocol}";
EOF
  chown ${main_user}.${main_user} "${temp_one}";
  chmod 700 "${temp_one}";
fi

. "${temp_one}";

declare db_mysql_login='';
declare db_mysql_password='';
declare db_mysql_server='';
declare db_mysql_port='';

temp_one="${main_project_path}/security_file/information_for_connection_in_db_server";

if [[ ! -f "${temp_one}" ]]; then
  echo;
  echo -n "${main_msg_data[13]}: ";
  read db_mysql_login;
  echo;
  stty -echo;
  echo -n "${main_msg_data[14]} ${db_login}: ";
  read db_mysql_password;
  stty echo;
  echo -e "\n";
  echo -n "${main_msg_data[15]}: ";
  read db_mysql_server;
  echo;
  echo -n "${main_msg_data[16]}: ";
  read db_mysql_port;
  echo;
  cat<<EOF > "${temp_one}";
declare -rx db_mysql_login="${db_login}";
declare -rx db_mysql_password="${db_password}";
declare -rx db_mysql_port="${db_port}";
declare -rx db_mysql_server="${db_server}";
EOF
  chown ${main_user}.${main_user} "${temp_one}";
  chmod 700 "${temp_one}";
fi

. "${temp_one}";

#
## Sytem information
#

## declare -rx lsb_release_short="$(lsb_release -rs)";
declare -rx lsb_release_short="$(rpm -E %fedora)";
declare -rx host_type="$HOSTTYPE";
declare -rx use_display="${DISPLAY%%.*}";

#
## Последнее время sendmail достал не только нагружая ж/д но иногда вешает систему до 30 минут
## настройки н помогли а посему....
#
declare -rx kill_sendmail=1;

#
## Services
#

## SSHD

declare -rx main_sshd_port=22;
declare -rx main_sshd_permit_root_login="no";
declare -rx main_sshd_show_banner="none";

#
## Network ifaces
#

##### iv4

declare main_white_ip='';
declare ip_device='';
declare ip_gateway='';
declare link_local='';
declare ip_mask='';
declare device_interface='';

temp_one="${main_project_path}/security_file/information_for_network_config";

if [[ ! -f "${temp_one}" ]]; then
  echo -e "\n";
  echo "!!! ${main_msg_data[100]} ${main_msg_data[99]} !!!";
  echo "$(nmcli c show | grep ethernet)";
  echo -e "\n";
  echo -n "${main_msg_data[99]}: ";
  read device_interface;
  echo -e "\n";
  echo -n "${main_msg_data[18]}: ";
  read ip_device;
  echo;
  echo -n "${main_msg_data[19]}: ";
  read ip_gateway;
  echo;
  echo -n "${main_msg_data[20]}: ";
  read link_local;
  echo;
  echo -n "${main_msg_data[21]}: ";
  read ip_mask;
  echo;
  echo -n "${main_msg_data[17]}: ";
  read main_white_ip;
  echo;
  cat<<EOF > "${temp_one}";
declare -rx device_interface="${device_interface}";
declare -rx ip_device="${ip_device}";
declare -rx ip_gateway="${ip_gateway}";
declare -rx link_local="${link_local}";
declare -rx ip_mask="${ip_mask}";
declare -rx main_white_ip="${main_white_ip}";
EOF
  chown ${main_user}.${main_user} "${temp_one}";
  chmod 700 "${temp_one}";
fi

. "${temp_one}";

declare -rx link_loop="127.0.0.0";
declare -rx ip_loop="127.0.0.1";
declare -rx ip_mask_loop="8";

declare -rx connect_method="manual";
declare -rx connect_autoconnect="yes";
declare -rx ignore_auto_dns="yes";
declare -rx ignore_auto_routes="yes";
declare -rx host_name="${main_hostname}";

## что пингуем

declare -rx main_ping_host="google.com";

#
##
###
#### iv6 tunnel broker
###
##
#

declare -rx brocker_add_interface=1;
declare -rx brocker_up_interface=0;
declare -rx brocker_autoconnect="no";

if [[ ${brocker_add_interface} -eq 1 ]];then


  declare -rx link_ipv6_loop="fe80::";
  declare -rx ipv6_loop="::1";

  declare -rx ipv6_mask_loop="128";

  ## Для релея  6to4

  # temp_one="${main_white_ip}";
  temp_one=(${main_white_ip//./ });

  declare -rx main_ipv6_6to4="$(printf \"2002:%02x%02x:%02x%02x::1\" ${temp_one[0]} ${temp_one[1]} ${temp_one[2]} ${temp_one[3]})";
  declare -rx anycast_ip_6to4="192.88.99.1";

  ## Настройка тунеля ipv6-ipv4-ipv6 для броккера

  declare -rx brocker_device_interface="he-ipv6";
  declare -rx brocker_local_ip="${ip_device}";
  declare -rx brocker_parent_device="${device_interface}";
  declare -rx brocker_connect_method="manual";
  declare -rx brocker_connect_type="ip-tunnel";

  declare -rx brocker_ignore_auto_dns="yes";
  declare -rx brocker_ignore_auto_routes="yes";

  declare name_brocker='';
  declare brocker_remote_ip='';
  declare brocker_gw_ipv6='';
  declare brocker_ipv6='';
  declare brocker_network_pull='';
  declare ipv6_mask='';
  declare ipv6_mask_pull='';

  declare local_ipv6_of_brocker_network_pull='';

  temp_one="${main_project_path}/security_file/information_tunnel_brocker_config";

  if [[ ! -f "${temp_one}" ]]; then
    echo "${main_msg_data[23]}";
    echo;
    echo -n "${main_msg_data[24]}: ";
    read name_brocker;
    [[ -z "${name_brocker}" ]] && name_brocker="tunnelbroker.net";
    echo -n "${main_msg_data[25]}: ";
    read brocker_remote_ip;
    echo;
    echo -n "${main_msg_data[26]}: ";
    read brocker_gw_ipv6;
    echo;
    echo -n "${main_msg_data[27]}: ";
    read brocker_ipv6;
    echo;
    echo -n "${main_msg_data[28]}: ";
    read brocker_network_pull;
    echo -n "${main_msg_data[97]}: ";
    read ipv6_mask;
    echo;
    echo -n "${main_msg_data[98]}: ";
    read ipv6_mask_pull;
    echo;
    cat<<EOF > "${temp_one}";
declare -rx name_brocker="${name_brocker}";
declare -rx brocker_remote_ip="${brocker_remote_ip}";
declare -rx brocker_gw_ipv6="${brocker_gw_ipv6}";
declare -rx brocker_ipv6="${brocker_ipv6}";
declare -rx brocker_network_pull="${brocker_network_pull}";
declare -rx ipv6_mask="${ipv6_mask}";
declare -rx ipv6_mask_pull="${ipv6_mask_pull}";
EOF
    chown ${main_user}.${main_user} "${temp_one}";
    chmod 700 "${temp_one}";

  fi

  . "${temp_one}";

  declare -rx local_ipv6_of_brocker_network_pull="${brocker_network_pull}$(echo ${ip_device} | awk -F '.' '{ print $4 }')";

fi

## READMI the list_of_dns_servers_in_ network.txt

##### old 0: 77.88.8.86 4.6.64.6 91.239.100.100 84.200.69.80
##### old 0: 2a02:6b8::feed:0ff 2620:74:1b::1:1 2001:1608:10:25::1c04:b12f 2001:4860:4860::8888

# declare -rx local_dns_recursor="unbound";
declare -rx local_dns_recursor="";

declare -rx check_local_dns_recursor="$( systemctl list-units | grep ${local_dns_recursor} )";

if [[ -n "${check_local_dns_recursor}"  ]]; then

  ## если есть локальный кеширующий DNS
  declare -rx ip_dns_local="$ip_loop";
  declare -rx ipv6_dns_local="$ipv6_loop";

else

  ## если нету локального кеширующего DNS
  declare -rx ip_dns_local="";
  declare -rx ipv6_dns_local="";

fi

#
#(primary slave)
#
# DNS от Cloudflare
declare -rx dns_Cloudflare=(1.1.1.1 1.0.0.1);
# DNS от DNS.Watch
declare -rx DNS_Watch=(84.200.69.80 84.200.70.40);
# DNS от VersingPublic master
declare -rx dns_VersingPublic=(64.6.64.6 64.6.65.6);
# dns.quad9.net https://www.quad9.net/doh-quad9-dns-servers/
declare -rx dns_quad9_net=(9.9.9.9 149.112.112.112);
# DNS от tunnelbrocker.net
declare -rx dns_tunnelbrocker_net=(74.82.42.42);
# DNS от Google
declare -rx dns_Google=(8.8.8.8 8.8.4.4);
# DNS от Yandex
declare -rx dns_Yandex=(77.88.8.8 77.88.8.1);
# DNS от OpenNIC https://servers.opennicproject.org/
declare -rx dns_OpenNIC=(185.121.177.177 169.239.202.202);

#
# TLS port 853
#
# Cloudflare
declare -rx dns_tls_Cloudflare=(1.1.1.1 1.0.0.1)
# quad9.net
declare -rx dns_tls_quad9=(9.9.9.9@853 149.112.112.112@853)
# dnsovertls.sinodun.com US # dnsovertls1.sinodun.com US
declare -rx dns_tls_sinodun_com_us=(145.100.185.15@853 145.100.185.16@853)
# tls-dns-u.odvr.dns-oarc.net US
declare -rx dns_tls_dns_oarc_net=(184.105.193.78@853)
# getdnsapi.net US
declare -rx dns_tls_getdnsapi_net=(185.49.141.37@853)
# dns.cmrg.net US
declare -rx dns_tls_cmrg_net=(199.58.81.218@853)
# securedns.eu Europe
declare -rx dns_tls_securedns_eu=(146.185.167.43@853)
# unicast.censurfridns.dk Europe
declare -rx dns_tls_unicast_censurfridns_dk=(89.233.43.71@853)


declare -rx ip_dns_1="${dns_Cloudflare[0]}";
declare -rx ip_dns_2="${dns_Cloudflare[1]}";
declare -rx ip_dns_3="${dns_quad9_net[0]}";
declare -rx ip_dns_4="${dns_quad9_net[1]}";
declare -rx ip_dns_5="${dns_VersingPublic[0]}";
declare -rx ip_dns_6="${dns_VersingPublic[1]}";


# DNS от Cloudflare (primary slave)
declare -rx dns_ipv6_Cloudflare=(2606:4700:4700::1111 2606:4700:4700::1001);
# DNS от DNS.Watch (primary slave)
declare -rx dns_ipv6_DNS_Watch=(2001:1608:10:25::1c04:b12f 2001:1608:10:25::9249:d69b);
# DNS от Versing public master
declare -rx dns_ipv6_VersingPublic=(2620:74:1b::1:1 2620:74:1c::2:2);
# dns.quad9.net
declare -rx dns_ipv6_quad9_net=(2620:fe::fe 2620:fe::fe:9);
# DNS от tunnelbrocker.nat
declare -rx dns_ipv6_tunnelbrocker_net=(2001:470:20::2);
# DNS от Google (primary slave)
declare -rx dns_ipv6_Google=(2001:4860:4860::8888 2001:4860:4860::8844);
# DNS от Yandex (primary slave)
declare -rx dns_ipv6_Yandex=(2a02:6b8::feed:0ff 2a02:6b8:0:1::feed:0ff);
# DNS от OpenNIC (primary slave) https://servers.opennicproject.org/
declare -rx dns_ipv6_OpenNIC=(2001:67c:13e4:1::37 2001:470:1f06:10b::2);

declare -rx ipv6_dns_1="${dns_ipv6_Google[0]}";
declare -rx ipv6_dns_2="${dns_ipv6_Google[1]}";
declare -rx ipv6_dns_3="${dns_ipv6_Cloudflare[0]}";
declare -rx ipv6_dns_4="${dns_ipv6_Cloudflare[1]}";
declare -rx ipv6_dns_5="${dns_ipv6_Yandex[0]}";
declare -rx ipv6_dns_6="${dns_ipv6_Yandex[1]}";

#
## Storage
#

declare main_storage='';

temp_one="${main_project_path}/security_file/main_storage_configuration";

if [[ ! -f "${temp_one}" ]]; then
  echo;
  echo -n "${main_msg_data[29]}: ";
  read main_storage;
  echo;
  cat <<EOF > "${temp_one}";
declare -rx main_storage="${main_storage}";
EOF
  chown ${main_user}.${main_user} "${temp_one}";
  chmod 700 "${temp_one}";
fi

. "${temp_one}";

#
## MEMCAHED
#

declare -rx memcached_cache_size=128;
declare -rx memcached_options="-l 127.0.0.1,::1";

#
## WWW хостинг
#

declare -rx main_apache_server="httpd";
declare -rx main_apache_server_http_port=80;
declare -rx main_apache_server_https_port=443;

# TO DO

declare -rx main_nginx_server="nginx";
declare -rx main_nginx_server_http_port=80;
declare -rx main_nginx_server_https_port=443;

declare -rx main_nginx_unit_server="unit";
declare -rx main_nginx_unit_server_http_port=80;
declare -rx main_nginx_unit_server_https_port=443;

declare -rx main_tomcat_server="tomcat";
declare -rx main_tomcat_server_http_port=8081;
declare -rx main_tomcat_server_https_port=8444;

declare -rx main_node_server="node";
declare -rx main_node_server_http_port=8082;
declare -rx main_node_server_https_port=8445;

# END TO DO

declare -rx main_server_signature="${main_org}"; # abbreviated main company
declare -rx main_server_signature_version="23.06.06"; # birthday of a bear cub
declare -rx main_server_os_version="HD"; # HOME DEVELOPMENT

declare -rx main_default_charset='UTF-8';
declare -rx main_content_language='ru, en-US';

declare -rx main_server_ping_host="google.com";

declare -rx letsencrypt_base_path="/etc/letsencrypt/live";

declare -rx letsencrypt_rsa_key_size=4096;

declare -rx main_www_base_path="$main_storage/Development/www_share";

declare -rx main_www_domain_list=(\
"$main_domain" \
"home.$main_domain" \
"4.home.$main_domain" \
"dev.$main_domain" \
"pma.$main_domain" \
);

declare main_publick_recaptcha_v2_checkbox='';
declare main_private_recaptcha_v2_checkbox='';
declare main_publick_recaptcha_v2_hidden='';
declare main_private_recaptcha_v2_hidden='';
declare main_publick_recaptcha_v3='';
declare main_private_recaptcha_v3='';

temp_one="${main_project_path}/security_file/main_recaptcha_configuration";

if [[ ! -f "${temp_one}" ]]; then
  echo;
  echo -n "${main_msg_data[91]}: ";
  read main_publick_recaptcha_v2_checkbox;
  echo;
  echo -n "${main_msg_data[92]}: ";
  read main_private_recaptcha_v2_checkbox;
  echo;
  echo -n "${main_msg_data[93]}: ";
  read main_publick_recaptcha_v2_hidden;
  echo;
  echo -n "${main_msg_data[94]}: ";
  read main_private_recaptcha_v2_hidden;
  echo;
  echo -n "${main_msg_data[95]}: ";
  read main_publick_recaptcha_v3;
  echo;
  echo -n "${main_msg_data[96]}: ";
  read main_private_recaptcha_v3;
  echo;
  cat<<EOF > "${temp_one}";
declare -rx main_publick_recaptcha_v2_checkbox="${main_publick_recaptcha_v2_checkbox}";
declare -rx main_private_recaptcha_v2_checkbox="${main_private_recaptcha_v2_checkbox}";
declare -rx main_publick_recaptcha_v2_hidden="${main_publick_recaptcha_v2_hidden}";
declare -rx main_private_recaptcha_v2_hidden="${main_private_recaptcha_v2_hidden}";
declare -rx main_publick_recaptcha_v3="${main_publick_recaptcha_v3}";
declare -rx main_private_recaptcha_v3="${main_private_recaptcha_v3}";
EOF
  chown ${main_user}.${main_user} "${temp_one}";
  chmod 700 "${temp_one}";
fi

. "${temp_one}";

#
## Базы данных
#

declare -rx main_data_base_path="$main_storage/System/db";

## Для MySQL шелла

declare -rx main_sql_config_file=".my.cnf.$$";
declare -rx main_sql_command_file=".mysql.$$";

#
## @TODO  заменить во всех скриптах project_path на main_project_path и убрать обявление project_path
#

[[ -z "$main_lib_functions_script_source" ]] && . "$main_project_path/lib/functions";

echo_w "${main_msg_data[30]}: ${main_lib_functions_script_source}";
echo_m "${main_msg_data[31]}: ${main_project_path}/";
echo_m "${main_msg_data[32]}: ${main_repo_path}";
echo_m "${main_msg_data[33]}: ${main_root_repo_path}";
